package chip8

C8_SCREEN_WIDTH :: 64
C8_SCREEN_HEIGHT :: 32
SCALE :: 20
MEM_SIZE_BYTES :: 4096
MEM_START_OFFSET :: 0x200
g_mem : [MEM_SIZE_BYTES]u8
FONTS_CNT :: 80
g_fonts : [FONTS_CNT]u8 = [FONTS_CNT]u8{
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80, // F
}
GP_REGS_QTY :: 16 // general purpose register quantity
g_gp_regs : [GP_REGS_QTY]u8
g_opcode: u16
g_pc: u16 = 0x200
g_index : u16
g_c8_screen : [C8_SCREEN_HEIGHT]u64
INVALID_KEY :: 0xFF
KEYS_QTY :: 16
Number_Set :: bit_set[0..<16; u16]
Screen_Row_Set :: bit_set[0..<C8_SCREEN_WIDTH; u64]
g_keys : Number_Set
g_key_is_pressed := false
g_delay_timer : u8
g_sound_timer : u8

LM_ONE :: u64(1 << 63)

STACK_SIZE :: 16
g_stack : [STACK_SIZE]u16
g_sp : i16 = -1
INCREMENT_PC :: true
DONT_INCREMENT_PC :: false

TARGET_FPS :: 60
TARGET_CPU_CLOCK :: 1000
// TARGET_CPU_CLOCK :: 60
